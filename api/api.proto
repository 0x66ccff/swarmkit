syntax = "proto3";

package api;

import "types.proto";

// TODO(stevvooe): Baseline API specification from POC. Take this to the
// production specification over the next few weeks.

service Swarm {
	rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
	rpc UpdateNodeStatus(UpdateNodeStatusRequest) returns (UpdateNodeStatusResponse) {}
	rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {}
	rpc DrainNode(DrainNodeRequest) returns (DrainNodeResponse) {}

	rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {}
	rpc GetTasks(GetTasksRequest) returns (GetTasksResponse) {}
	rpc RemoveTask(RemoveTaskRequest) returns (RemoveTaskResponse) {}
	rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}

	rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {}
	rpc GetJob(GetJobRequest) returns (GetJobResponse) {}
	rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse) {}
	rpc RemoveJob(RemoveJobRequest) returns (RemoveJobResponse) {}
	rpc ListJobs(ListJobsRequest) returns (ListJobsResponse) {}

	rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse) {};
	rpc WatchTasks(WatchTasksRequest) returns (stream WatchTasksResponse){};

	// TODO(stevvooe): Split this API up into "Agent" and "Control".
}

message RegisterNodeRequest {
	Node node = 1;
}

message RegisterNodeResponse {
	uint64 heartbeat_ttl = 1;
}

message UpdateNodeStatusRequest {
	string node_id = 1;
	NodeStatus status = 2;
}

message UpdateNodeStatusResponse {
	uint64 heartbeat_ttl = 1;
}

message ListNodesRequest {
}

message ListNodesResponse {
	repeated Node nodes = 1;
}

message DrainNodeRequest {
	string node_id = 1;
	bool drain = 2;
}

message DrainNodeResponse {
}

message CreateTaskRequest {
	Spec spec = 1;
}

message CreateTaskResponse {
	string task_id = 1;
}

message GetTasksRequest {
	repeated string task_ids = 1;
}

message GetTasksResponse {
	repeated Task tasks = 1;
}

message RemoveTaskRequest {
	string task_id = 1;
}

message RemoveTaskResponse {
}

message ListTasksRequest {
}

message ListTasksResponse {
	repeated Task tasks = 1;
}

message CreateJobRequest {
	Spec spec = 1;
}

message CreateJobResponse {
	string job_id = 1;
}

message GetJobRequest {
	string job_id = 1;
}

message GetJobResponse {
	Job job = 1;
}

message UpdateJobRequest {
	string job_id = 1;
	Spec spec = 2;
}

message UpdateJobResponse {
}

message RemoveJobRequest {
	string job_id = 1;
}

message RemoveJobResponse {
}

message ListJobsRequest {
}

message ListJobsResponse {
	repeated Job jobs = 1;
}

message UpdateTaskStatusRequest {
	// Tasks should contain all statuses for running tasks. Only the status
	// field must be set. The spec is not required.
	repeated Task tasks = 1;
}

message  UpdateTaskStatusResponse{
	// void
}



message WatchTasksRequest {
	// TODO(stevvooe): Really, node id assignments should be done through
	// headers and sessionization.

	string node_id = 1;
}

message WatchTasksResponse {
	// Tasks is the set of tasks that should be running on the node.
	// Tasks outside of this set running on the node should be terminated.
	repeated Task tasks = 1;
}
