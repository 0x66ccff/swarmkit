// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegisterNodeRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *RegisterNodeRequest) Reset()                    { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()               {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RegisterNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type RegisterNodeResponse struct {
	HeartbeatTtl uint64 `protobuf:"varint,1,opt,name=heartbeat_ttl" json:"heartbeat_ttl,omitempty"`
}

func (m *RegisterNodeResponse) Reset()                    { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()               {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type UpdateNodeStatusRequest struct {
	NodeId string     `protobuf:"bytes,1,opt,name=node_id" json:"node_id,omitempty"`
	Status NodeStatus `protobuf:"varint,2,opt,name=status,enum=api.NodeStatus" json:"status,omitempty"`
}

func (m *UpdateNodeStatusRequest) Reset()                    { *m = UpdateNodeStatusRequest{} }
func (m *UpdateNodeStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeStatusRequest) ProtoMessage()               {}
func (*UpdateNodeStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type UpdateNodeStatusResponse struct {
	HeartbeatTtl uint64 `protobuf:"varint,1,opt,name=heartbeat_ttl" json:"heartbeat_ttl,omitempty"`
}

func (m *UpdateNodeStatusResponse) Reset()                    { *m = UpdateNodeStatusResponse{} }
func (m *UpdateNodeStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeStatusResponse) ProtoMessage()               {}
func (*UpdateNodeStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type ListNodesRequest struct {
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type ListNodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListNodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DrainNodeRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id" json:"node_id,omitempty"`
	Drain  bool   `protobuf:"varint,2,opt,name=drain" json:"drain,omitempty"`
}

func (m *DrainNodeRequest) Reset()                    { *m = DrainNodeRequest{} }
func (m *DrainNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DrainNodeRequest) ProtoMessage()               {}
func (*DrainNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type DrainNodeResponse struct {
}

func (m *DrainNodeResponse) Reset()                    { *m = DrainNodeResponse{} }
func (m *DrainNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DrainNodeResponse) ProtoMessage()               {}
func (*DrainNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type CreateTaskRequest struct {
	Spec *Spec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *CreateTaskRequest) Reset()                    { *m = CreateTaskRequest{} }
func (m *CreateTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskRequest) ProtoMessage()               {}
func (*CreateTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CreateTaskRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type CreateTaskResponse struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id" json:"task_id,omitempty"`
}

func (m *CreateTaskResponse) Reset()                    { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()               {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type GetTasksRequest struct {
	TaskIds []string `protobuf:"bytes,1,rep,name=task_ids" json:"task_ids,omitempty"`
}

func (m *GetTasksRequest) Reset()                    { *m = GetTasksRequest{} }
func (m *GetTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTasksRequest) ProtoMessage()               {}
func (*GetTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type GetTasksResponse struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *GetTasksResponse) Reset()                    { *m = GetTasksResponse{} }
func (m *GetTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTasksResponse) ProtoMessage()               {}
func (*GetTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type RemoveTaskRequest struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id" json:"task_id,omitempty"`
}

func (m *RemoveTaskRequest) Reset()                    { *m = RemoveTaskRequest{} }
func (m *RemoveTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveTaskRequest) ProtoMessage()               {}
func (*RemoveTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type RemoveTaskResponse struct {
}

func (m *RemoveTaskResponse) Reset()                    { *m = RemoveTaskResponse{} }
func (m *RemoveTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveTaskResponse) ProtoMessage()               {}
func (*RemoveTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type ListTasksRequest struct {
}

func (m *ListTasksRequest) Reset()                    { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()               {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type ListTasksResponse struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ListTasksResponse) Reset()                    { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()               {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ListTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type CreateJobRequest struct {
	Spec *Spec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *CreateJobRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type CreateJobResponse struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *CreateJobResponse) Reset()                    { *m = CreateJobResponse{} }
func (m *CreateJobResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateJobResponse) ProtoMessage()               {}
func (*CreateJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type GetJobRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *GetJobRequest) Reset()                    { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()               {}
func (*GetJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type GetJobResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *GetJobResponse) Reset()                    { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string            { return proto.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()               {}
func (*GetJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GetJobResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type UpdateJobRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
	Spec  *Spec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *UpdateJobRequest) Reset()                    { *m = UpdateJobRequest{} }
func (m *UpdateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobRequest) ProtoMessage()               {}
func (*UpdateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *UpdateJobRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type UpdateJobResponse struct {
}

func (m *UpdateJobResponse) Reset()                    { *m = UpdateJobResponse{} }
func (m *UpdateJobResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobResponse) ProtoMessage()               {}
func (*UpdateJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

type RemoveJobRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id" json:"job_id,omitempty"`
}

func (m *RemoveJobRequest) Reset()                    { *m = RemoveJobRequest{} }
func (m *RemoveJobRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveJobRequest) ProtoMessage()               {}
func (*RemoveJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type RemoveJobResponse struct {
}

func (m *RemoveJobResponse) Reset()                    { *m = RemoveJobResponse{} }
func (m *RemoveJobResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveJobResponse) ProtoMessage()               {}
func (*RemoveJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

type ListJobsRequest struct {
}

func (m *ListJobsRequest) Reset()                    { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()               {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type ListJobsResponse struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *ListJobsResponse) Reset()                    { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()               {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *ListJobsResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type UpdateTaskStatusRequest struct {
	// Tasks should contain all statuses for running tasks. Only the status
	// field must be set. The spec is not required.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *UpdateTaskStatusRequest) Reset()                    { *m = UpdateTaskStatusRequest{} }
func (m *UpdateTaskStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskStatusRequest) ProtoMessage()               {}
func (*UpdateTaskStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *UpdateTaskStatusRequest) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type UpdateTaskStatusResponse struct {
}

func (m *UpdateTaskStatusResponse) Reset()                    { *m = UpdateTaskStatusResponse{} }
func (m *UpdateTaskStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskStatusResponse) ProtoMessage()               {}
func (*UpdateTaskStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

type WatchTasksRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id" json:"node_id,omitempty"`
}

func (m *WatchTasksRequest) Reset()                    { *m = WatchTasksRequest{} }
func (m *WatchTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchTasksRequest) ProtoMessage()               {}
func (*WatchTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type WatchTasksResponse struct {
	// Tasks is the set of tasks that should be running on the node.
	// Tasks outside of this set running on the node should be terminated.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *WatchTasksResponse) Reset()                    { *m = WatchTasksResponse{} }
func (m *WatchTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchTasksResponse) ProtoMessage()               {}
func (*WatchTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *WatchTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "api.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "api.RegisterNodeResponse")
	proto.RegisterType((*UpdateNodeStatusRequest)(nil), "api.UpdateNodeStatusRequest")
	proto.RegisterType((*UpdateNodeStatusResponse)(nil), "api.UpdateNodeStatusResponse")
	proto.RegisterType((*ListNodesRequest)(nil), "api.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "api.ListNodesResponse")
	proto.RegisterType((*DrainNodeRequest)(nil), "api.DrainNodeRequest")
	proto.RegisterType((*DrainNodeResponse)(nil), "api.DrainNodeResponse")
	proto.RegisterType((*CreateTaskRequest)(nil), "api.CreateTaskRequest")
	proto.RegisterType((*CreateTaskResponse)(nil), "api.CreateTaskResponse")
	proto.RegisterType((*GetTasksRequest)(nil), "api.GetTasksRequest")
	proto.RegisterType((*GetTasksResponse)(nil), "api.GetTasksResponse")
	proto.RegisterType((*RemoveTaskRequest)(nil), "api.RemoveTaskRequest")
	proto.RegisterType((*RemoveTaskResponse)(nil), "api.RemoveTaskResponse")
	proto.RegisterType((*ListTasksRequest)(nil), "api.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "api.ListTasksResponse")
	proto.RegisterType((*CreateJobRequest)(nil), "api.CreateJobRequest")
	proto.RegisterType((*CreateJobResponse)(nil), "api.CreateJobResponse")
	proto.RegisterType((*GetJobRequest)(nil), "api.GetJobRequest")
	proto.RegisterType((*GetJobResponse)(nil), "api.GetJobResponse")
	proto.RegisterType((*UpdateJobRequest)(nil), "api.UpdateJobRequest")
	proto.RegisterType((*UpdateJobResponse)(nil), "api.UpdateJobResponse")
	proto.RegisterType((*RemoveJobRequest)(nil), "api.RemoveJobRequest")
	proto.RegisterType((*RemoveJobResponse)(nil), "api.RemoveJobResponse")
	proto.RegisterType((*ListJobsRequest)(nil), "api.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "api.ListJobsResponse")
	proto.RegisterType((*UpdateTaskStatusRequest)(nil), "api.UpdateTaskStatusRequest")
	proto.RegisterType((*UpdateTaskStatusResponse)(nil), "api.UpdateTaskStatusResponse")
	proto.RegisterType((*WatchTasksRequest)(nil), "api.WatchTasksRequest")
	proto.RegisterType((*WatchTasksResponse)(nil), "api.WatchTasksResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Swarm service

type SwarmClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	UpdateNodeStatus(ctx context.Context, in *UpdateNodeStatusRequest, opts ...grpc.CallOption) (*UpdateNodeStatusResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error)
	RemoveTask(ctx context.Context, in *RemoveTaskRequest, opts ...grpc.CallOption) (*RemoveTaskResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	RemoveJob(ctx context.Context, in *RemoveJobRequest, opts ...grpc.CallOption) (*RemoveJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error)
	WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (Swarm_WatchTasksClient, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) UpdateNodeStatus(ctx context.Context, in *UpdateNodeStatusRequest, opts ...grpc.CallOption) (*UpdateNodeStatusResponse, error) {
	out := new(UpdateNodeStatusResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/UpdateNodeStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error) {
	out := new(DrainNodeResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/DrainNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/GetTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) RemoveTask(ctx context.Context, in *RemoveTaskRequest, opts ...grpc.CallOption) (*RemoveTaskResponse, error) {
	out := new(RemoveTaskResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/RemoveTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/ListTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/UpdateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) RemoveJob(ctx context.Context, in *RemoveJobRequest, opts ...grpc.CallOption) (*RemoveJobResponse, error) {
	out := new(RemoveJobResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/RemoveJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error) {
	out := new(UpdateTaskStatusResponse)
	err := grpc.Invoke(ctx, "/api.Swarm/UpdateTaskStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (Swarm_WatchTasksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[0], c.cc, "/api.Swarm/WatchTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmWatchTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_WatchTasksClient interface {
	Recv() (*WatchTasksResponse, error)
	grpc.ClientStream
}

type swarmWatchTasksClient struct {
	grpc.ClientStream
}

func (x *swarmWatchTasksClient) Recv() (*WatchTasksResponse, error) {
	m := new(WatchTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Swarm service

type SwarmServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	UpdateNodeStatus(context.Context, *UpdateNodeStatusRequest) (*UpdateNodeStatusResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error)
	RemoveTask(context.Context, *RemoveTaskRequest) (*RemoveTaskResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	RemoveJob(context.Context, *RemoveJobRequest) (*RemoveJobResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusResponse, error)
	WatchTasks(*WatchTasksRequest, Swarm_WatchTasksServer) error
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).RegisterNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_UpdateNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).UpdateNodeStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).ListNodes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_DrainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DrainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).DrainNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).CreateTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).GetTasks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_RemoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RemoveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).RemoveTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).ListTasks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).CreateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).GetJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).UpdateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_RemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RemoveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).RemoveJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).ListJobs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SwarmServer).UpdateTaskStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Swarm_WatchTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).WatchTasks(m, &swarmWatchTasksServer{stream})
}

type Swarm_WatchTasksServer interface {
	Send(*WatchTasksResponse) error
	grpc.ServerStream
}

type swarmWatchTasksServer struct {
	grpc.ServerStream
}

func (x *swarmWatchTasksServer) Send(m *WatchTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Swarm_RegisterNode_Handler,
		},
		{
			MethodName: "UpdateNodeStatus",
			Handler:    _Swarm_UpdateNodeStatus_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Swarm_ListNodes_Handler,
		},
		{
			MethodName: "DrainNode",
			Handler:    _Swarm_DrainNode_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Swarm_CreateTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _Swarm_GetTasks_Handler,
		},
		{
			MethodName: "RemoveTask",
			Handler:    _Swarm_RemoveTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Swarm_ListTasks_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Swarm_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Swarm_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Swarm_UpdateJob_Handler,
		},
		{
			MethodName: "RemoveJob",
			Handler:    _Swarm_RemoveJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Swarm_ListJobs_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _Swarm_UpdateTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTasks",
			Handler:       _Swarm_WatchTasks_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor1 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x59, 0x6f, 0x13, 0x3d,
	0x14, 0x4d, 0x97, 0xa4, 0xc9, 0xed, 0x96, 0x38, 0x4b, 0xd3, 0x51, 0xab, 0xef, 0x93, 0x91, 0xd8,
	0x54, 0xaa, 0x92, 0xc2, 0x03, 0x8b, 0x54, 0x55, 0x80, 0xa0, 0x08, 0x21, 0x31, 0x2d, 0xe2, 0x81,
	0x87, 0x6a, 0xd2, 0x58, 0x34, 0xd0, 0x76, 0xc2, 0x8c, 0x0b, 0xe2, 0x9f, 0xf2, 0x73, 0xf0, 0x72,
	0xed, 0xf1, 0x78, 0x32, 0x4a, 0xfb, 0x96, 0x39, 0xbe, 0xe7, 0x6e, 0xc7, 0x3e, 0x0a, 0x34, 0xa2,
	0xc9, 0x78, 0x77, 0x92, 0xc4, 0x3c, 0x26, 0x0b, 0xe2, 0x67, 0xb0, 0xcc, 0xff, 0x4c, 0x58, 0xaa,
	0x11, 0xfa, 0x04, 0xda, 0x21, 0xfb, 0x36, 0x4e, 0x39, 0x4b, 0x3e, 0xc6, 0x23, 0x16, 0xb2, 0x9f,
	0xd7, 0x2c, 0xe5, 0x64, 0x1b, 0x16, 0xaf, 0xc4, 0x67, 0x7f, 0xee, 0xff, 0xb9, 0xfb, 0xcb, 0x83,
	0xc6, 0xae, 0x4c, 0xa1, 0xce, 0x15, 0x4c, 0x5f, 0x40, 0x27, 0xcf, 0x4a, 0x27, 0xf1, 0x55, 0xca,
	0xc8, 0x1d, 0x58, 0x3d, 0x67, 0x51, 0xc2, 0x87, 0x2c, 0xe2, 0xa7, 0x9c, 0x5f, 0x28, 0xfe, 0x62,
	0xb8, 0x62, 0xc1, 0x13, 0x7e, 0x41, 0xbf, 0xc2, 0xc6, 0xe7, 0xc9, 0x28, 0xe2, 0x4c, 0x52, 0x8f,
	0x79, 0xc4, 0xaf, 0x53, 0x53, 0x76, 0x03, 0x96, 0x64, 0xfe, 0xd3, 0xf1, 0x48, 0x31, 0x1b, 0x61,
	0x4d, 0x7e, 0x1e, 0x8d, 0xc8, 0x3d, 0xa8, 0xa5, 0x2a, 0xb2, 0x3f, 0x2f, 0xf0, 0xb5, 0xc1, 0xba,
	0xed, 0x08, 0x13, 0xe0, 0x31, 0x3d, 0x80, 0x7e, 0x31, 0xf9, 0x6d, 0xba, 0x23, 0xd0, 0xfc, 0x20,
	0x06, 0x93, 0x74, 0xd3, 0x96, 0x58, 0x52, 0xcb, 0xc1, 0x30, 0xdb, 0x7f, 0x50, 0x95, 0xcd, 0xa5,
	0x22, 0xcb, 0x42, 0x7e, 0x47, 0x1a, 0xa7, 0x87, 0xd0, 0x7c, 0x9d, 0x44, 0xe3, 0x2b, 0x77, 0xaf,
	0xa5, 0x03, 0x76, 0xa0, 0x3a, 0x92, 0xc1, 0x6a, 0xbe, 0x7a, 0xa8, 0x3f, 0x68, 0x1b, 0x5a, 0x4e,
	0x0a, 0x5d, 0x98, 0x0e, 0xa0, 0xf5, 0x2a, 0x11, 0xdd, 0xb2, 0x93, 0x28, 0xfd, 0xe1, 0x08, 0x96,
	0x4e, 0xd8, 0x59, 0x4e, 0xb0, 0x63, 0x01, 0x84, 0x0a, 0xa6, 0x8f, 0x80, 0xb8, 0x1c, 0x1c, 0x41,
	0x74, 0xc3, 0xc5, 0xb7, 0xd3, 0x8d, 0xfc, 0x3c, 0x1a, 0xd1, 0x1d, 0x58, 0x7f, 0xcb, 0xb8, 0x8c,
	0xb5, 0xd2, 0x6c, 0x42, 0x1d, 0x63, 0xf5, 0xc4, 0x8d, 0x70, 0x49, 0x07, 0xa7, 0x74, 0x1f, 0x9a,
	0x59, 0x74, 0xb6, 0x1d, 0x79, 0x9c, 0xdf, 0x8e, 0x2a, 0xae, 0x71, 0x51, 0xa2, 0x15, 0xb2, 0xcb,
	0xf8, 0x57, 0x6e, 0x8a, 0xd2, 0x86, 0x3a, 0x40, 0xdc, 0x68, 0xdc, 0x04, 0x6a, 0xe5, 0xf6, 0x69,
	0xb4, 0xba, 0x65, 0x37, 0x8f, 0xa1, 0xa9, 0xf7, 0xf3, 0x3e, 0x1e, 0xde, 0x70, 0xa5, 0x0f, 0x8d,
	0x0c, 0x8a, 0x82, 0x85, 0xba, 0x50, 0xfb, 0x1e, 0x0f, 0xb3, 0xfe, 0xab, 0xe2, 0x4b, 0xb4, 0x7f,
	0x17, 0x56, 0xc5, 0x86, 0x9c, 0xdc, 0x25, 0x71, 0x3b, 0xb0, 0x66, 0xe2, 0x30, 0x61, 0x00, 0x0b,
	0xe2, 0x08, 0x7b, 0xa8, 0xab, 0x1e, 0xe4, 0xb1, 0x04, 0xe9, 0x3b, 0x68, 0xea, 0xbb, 0x3e, 0x33,
	0xb1, 0x9d, 0x65, 0x7e, 0xfa, 0x2c, 0xe2, 0x9e, 0x39, 0x99, 0x70, 0xbb, 0x0f, 0xa0, 0xa9, 0x77,
	0x3e, 0xbb, 0xef, 0xb6, 0x11, 0xd3, 0xe5, 0xb7, 0x60, 0x5d, 0x2a, 0x21, 0x20, 0x2b, 0xce, 0x9e,
	0x16, 0x4c, 0x43, 0x38, 0xe1, 0x16, 0x2c, 0x8a, 0x24, 0x46, 0x9a, 0x6c, 0x44, 0x85, 0xd2, 0xe7,
	0xc6, 0x2c, 0xa4, 0x5a, 0x79, 0xb3, 0x98, 0x29, 0x6a, 0x60, 0xbc, 0xc0, 0xe5, 0x62, 0x73, 0xe2,
	0xfa, 0x7d, 0x89, 0xf8, 0xd9, 0x79, 0xee, 0x8e, 0x97, 0xbd, 0x4e, 0xfa, 0x14, 0x88, 0x1b, 0x7d,
	0xc3, 0x5b, 0x35, 0xf8, 0xbb, 0x04, 0xd5, 0xe3, 0xdf, 0x51, 0x72, 0x49, 0xde, 0xc0, 0x8a, 0x6b,
	0x98, 0xa4, 0xaf, 0x62, 0xa7, 0x38, 0x6f, 0xb0, 0x39, 0xe5, 0x04, 0x7b, 0xae, 0x90, 0x4f, 0x46,
	0xf1, 0xcc, 0xdd, 0xc8, 0x96, 0x22, 0x94, 0x38, 0x6a, 0xb0, 0x5d, 0x72, 0x6a, 0x53, 0xbe, 0x84,
	0x86, 0xf5, 0x36, 0xd2, 0x55, 0xd1, 0xbe, 0xff, 0x05, 0x3d, 0x1f, 0x76, 0xd9, 0xd6, 0xa0, 0x90,
	0xed, 0x7b, 0x1e, 0xb2, 0x8b, 0x3e, 0x56, 0x21, 0x07, 0x00, 0x99, 0x2b, 0x11, 0x1d, 0x57, 0xb0,
	0xb6, 0x60, 0xa3, 0x80, 0xdb, 0x04, 0xcf, 0xa0, 0x6e, 0x9c, 0x87, 0x74, 0x54, 0x98, 0x67, 0x5b,
	0x41, 0xd7, 0x43, 0xdd, 0xda, 0x99, 0xa3, 0x60, 0xed, 0x82, 0x21, 0x61, 0xed, 0x29, 0xd6, 0x63,
	0x17, 0xa7, 0x8b, 0x67, 0x8b, 0xcb, 0x55, 0xef, 0xf9, 0xb0, 0xcb, 0xb6, 0xee, 0x81, 0x6c, 0xdf,
	0x80, 0x82, 0x9e, 0x0f, 0x5b, 0xf6, 0x3e, 0xd4, 0xb4, 0x4f, 0x10, 0x62, 0xe6, 0x73, 0x78, 0xed,
	0x1c, 0xe6, 0x96, 0xb4, 0x8f, 0x1c, 0x4b, 0xfa, 0xf6, 0x81, 0x25, 0x8b, 0x5e, 0xa0, 0xd8, 0xf6,
	0x89, 0x23, 0xdb, 0x77, 0x87, 0xa0, 0xe7, 0xc3, 0xae, 0x50, 0xe6, 0xe1, 0xa3, 0x50, 0x9e, 0x35,
	0x04, 0x5d, 0x0f, 0x2d, 0xde, 0xf9, 0xec, 0x15, 0xe7, 0xee, 0x7c, 0xc1, 0x18, 0x72, 0x77, 0x7e,
	0xca, 0xd3, 0xaf, 0x90, 0x43, 0x80, 0xec, 0x39, 0xa3, 0xf6, 0x05, 0x37, 0x40, 0xed, 0x8b, 0xef,
	0x9e, 0x56, 0xf6, 0xe6, 0x86, 0x35, 0xf5, 0xf7, 0x69, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe7, 0x5c, 0x8a, 0xd6, 0x5d, 0x09, 0x00, 0x00,
}
