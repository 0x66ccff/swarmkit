syntax = "proto3";

package api;

import "types.proto";

// NOTE(stevvooe): Make sure your gopath is appropriately set for this to work
// correctly.
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Dispatcher is the API provided by a manager group for agents to connect to. Agents
// connect to this service to receive task assignments and report status.
//
// API methods on this service are used only by agent nodes.
service Dispatcher { // maybe dispatch, al likes this
	// Register is used for registration of node with particular dispatcher.
	rpc Register(RegisterRequest) returns (RegisterResponse) {};

	// Session controls an agent with a stream of SessionMessage. Agents should
	// immediately issue this call after a successful register and listen on
	// the stream at all times for instruction.
	rpc Session(SessionRequest) returns (stream SessionMessage) {}

	// Heartbeat is heartbeat method for nodes. It returns new TTL in response.
	// Node should send new heartbeat earlier than now + TTL, otherwise it will
	// be deregistered from dispatcher and its status will be updated to NodeStatus_DOWN
	rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {};

	// UpdateTaskStatus updates status of task. Node should send such updates
	// on every status change of its tasks.
	rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse) {};

	// Tasks is a stream of tasks state for node. Each message contains full list
	// of tasks which should be run on node, if task is not present in that list,
	// it should be terminated.
	rpc Tasks(TasksRequest) returns (stream TasksMessage) {};
}

message RegisterRequest {
	NodeSpec spec = 1;
}

message RegisterResponse {
	// NodeID identifies the registering node.
	string node_id = 1 [(gogoproto.customname) = "NodeID"];

	// SessionID is allocated after a successful registration. It should be
	// used on all RPC calls after registration. A dispatcher may choose to
	// change the SessionID, at which time an agent must re-register and obtain
	// a new one.
	string session_id = 2 [(gogoproto.customname) = "SessionID"];
}

// SessionRequest starts a session control stream.
message SessionRequest {
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
	string session_id = 2 [(gogoproto.customname) = "SessionID"];
}

// SessionMessage instructs an agent on various actions as part of the current
// session. An agent should act immediately on the contents.
message SessionMessage {
	// Managers provides a weight list of alternative dispatchers 
	repeated WeightedPeer managers = 1;

	// Disconnect instructs the agent to disconnect from the current disptacher
	// and select a new one.
	bool disconnect = 2;
}

// HeartbeatRequest provides identifying properties for a single heartbeat.
message HeartbeatRequest {
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
	string session_id = 2 [(gogoproto.customname) = "SessionID"];
}

message HeartbeatResponse {
	// Period is the duration to wait before sending the next heartbeat.
	// Well-behaved agents should update this on every heartbeat round trip. 
	uint64 Period = 1 [(gogoproto.customtype) = "time.Duration", (gogoproto.nullable) = false];
}

message UpdateTaskStatusRequest {
	// Tasks should contain all statuses for running tasks. Only the status
	// field must be set. The spec is not required.
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
	string session_id = 2 [(gogoproto.customname) = "SessionID"];
	repeated Task tasks = 3;
}

message  UpdateTaskStatusResponse{
	// void
}

message TasksRequest {
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
	string session_id = 2 [(gogoproto.customname) = "SessionID"];
}

message TasksMessage {
	// Tasks is the set of tasks that should be running on the node.
	// Tasks outside of this set running on the node should be terminated.
	repeated Task tasks = 1;
}

