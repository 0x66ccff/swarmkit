syntax = "proto3";

package api;

import "types.proto";

// NOTE(stevvooe): Make sure your gopath is appropriately set for this to work
// correctly.
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Agent is the API provided by a master group for agents to connect to. Agents
// connect to this service to receive task assignments and report status.
//
// API methods on this service are used only by agent nodes.
service Agent { // maybe dispatch, al likes this
	// Register is used for registration of node with particular dispatcher.
	rpc Register(RegisterRequest) returns (RegisterResponse) {};
	// Heartbeat is heartbeat method for nodes. It returns new TTL in response.
	// Node should send new heartbeat earlier than now + TTL, otherwise it will
	// be deregistered from dispatcher and its status will be updated to NodeStatus_DOWN
	rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {};
	// UpdateTaskStatus updates status of task. Node should send such updates
	// on every status change of its tasks.
	rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse) {};
	// Tasks is a stream of tasks state for node. Each message contains full list
	// of tasks which should be run on node, if task is not present in that list,
	// it should be terminated.
	rpc Tasks(TasksRequest) returns (stream TasksResponse) {};
	// Session is stream which controls agent connection.
	// Each message contains list of backup Managers with weights. Also there is
	// special boolean field Disconnect which if true indicates that node should
	// reconnect to another Manager immediately.
	rpc Session(SessionRequest) returns (stream SessionResponse) {}
}

message RegisterRequest {
	Node node = 1;
}

message RegisterResponse {
	uint64 ttl = 1 [(gogoproto.customname) = "TTL", (gogoproto.customtype) = "time.Duration", (gogoproto.nullable) = false];
}

message UpdateNodeStatusRequest {
	string node_id = 1;
	NodeStatus status = 2;
}

message UpdateNodeStatusResponse {
	uint64 heartbeat_ttl = 1 [(gogoproto.customname) = "HeartbeatTTL"];
}

message UpdateTaskStatusRequest {
	// Tasks should contain all statuses for running tasks. Only the status
	// field must be set. The spec is not required.
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
	repeated Task tasks = 2;
}

message  UpdateTaskStatusResponse{
	// void
}

message TasksRequest {
	// TODO(stevvooe): Really, node id assignments should be done through
	// headers and sessionization.
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
}

message TasksResponse {
	// Tasks is the set of tasks that should be running on the node.
	// Tasks outside of this set running on the node should be terminated.
	repeated Task tasks = 1;
}

message HeartbeatRequest {
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
}

message HeartbeatResponse {
	// TTL is the duration to wait before sending the next heartbeat.
	// Well-behaved agents should update this on every heartbeat round trip. 
	uint64 ttl = 1 [(gogoproto.customname) = "TTL", (gogoproto.customtype) = "time.Duration", (gogoproto.nullable) = false];
}

message ManagerInfo {
	string addr = 1;
	float weight = 2;
}

message SessionRequest {
	string node_id = 1 [(gogoproto.customname) = "NodeID"];
}

message SessionResponse {
	repeated ManagerInfo managers = 1;
	bool disconnect = 2;
}
